(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{410:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_11-49-35.fee69218.png"},411:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_14-47-46.441e7419.png"},412:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_14-58-36.83ff69f4.png"},413:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_15-12-29.40d5d279.png"},414:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_15-46-03.60ebf828.png"},415:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_17-29-49.1657b05c.png"},416:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_17-46-37.7602668d.png"},417:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_17-55-42.e088df0b.png"},418:function(s,t,a){s.exports=a.p+"assets/img/Snipaste_2022-10-07_17-56-41.c9e4d8e6.png"},479:function(s,t,a){"use strict";a.r(t);var n=a(33),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"算法图解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法图解"}},[s._v("#")]),s._v(" 算法图解")]),s._v(" "),n("blockquote",[n("p",[s._v("大O表示法：表示算法的速度有多快，可以知道运行时间如何随列表增长而增长，算法的速度指的并非时间而是操作数。N代表操作数。log指的都log2，对数是幂运算的逆运算。")])]),s._v(" "),n("h2",{attrs:{id:"二分查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[s._v("#")]),s._v(" 二分查找")]),s._v(" "),n("blockquote",[n("p",[s._v("仅当列表有序才可用")])]),s._v(" "),n("p",[s._v("在有序的列表中，从中间开始查找，比目标值大的在右边，小的在左边，每次从中间开始。")]),s._v(" "),n("p",[n("strong",[s._v("代码实现")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("binary_search")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    low "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" \n    high "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  \n    where low"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("high"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" high"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\tguess "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" guess "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\t    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" mid\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" guess "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\t    high "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\t    low "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("img",{attrs:{src:a(410),alt:""}})]),s._v(" "),n("blockquote",[n("p",[s._v("链表的优势在于插入元素方面，数组一旦超过预设空间就得诺位置，数组在随机读取元素方面效率很高，数组中的所有元素类型必须相同。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("operate")]),s._v(" "),n("th",[s._v("数组")]),s._v(" "),n("th",[s._v("链表")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("读取")]),s._v(" "),n("td",[s._v("O(1)")]),s._v(" "),n("td",[s._v("O(n)")])]),s._v(" "),n("tr",[n("td",[s._v("插入")]),s._v(" "),n("td",[s._v("O(n)")]),s._v(" "),n("td",[s._v("O(1)")])]),s._v(" "),n("tr",[n("td",[s._v("删除")]),s._v(" "),n("td",[s._v("O(n)")]),s._v(" "),n("td",[s._v("O(1)")])])])]),s._v(" "),n("p",[s._v("当且仅当能够立刻范围删除元素时，才是O(1)")])]),s._v(" "),n("h2",{attrs:{id:"选择排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[s._v("#")]),s._v(" 选择排序")]),s._v(" "),n("p",[s._v("遍历元素，每次抽出目标元素放在新的列表中，继续遍历，直到所有元素被处理。即有N给元素，要执行N遍选择。")]),s._v(" "),n("p",[s._v("时间复杂度：O(n*n)")]),s._v(" "),n("blockquote",[n("p",[s._v("并非每次都需要检查n个元素。第一次需要检查n个元素，但随后检查的元素数依次为n -1, n -2, …, 2和1。平均每次检查的元素数为1/2 ×n，因此运行时间为O(n×1/2×n)。但大O表示法省略诸如1/2这样的常数")])]),s._v(" "),n("p",[n("strong",[s._v("代码实现")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#元素从小按大排序")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#找出给定数组中最小的元素")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("findSmallest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    smallest "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    smallest_index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#遍历当前数组每个元素")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#选择最少的")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" smallest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            smallest "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n            smallest_index "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" smallest_index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("selectionSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    newArry "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        smallest "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" findSmallest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        newArry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("smallest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" newArry\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("blockquote",[n("p",[s._v("递归")]),s._v(" "),n("ul",[n("li",[s._v("基线条件（结束递归的条件） 和 递归条件")]),s._v(" "),n("li",[s._v("Haskell大量使用了递归，因此它提供了各种方便实现递归的语法。如果你喜欢递归或想学习一门新语言，可以研究一下Haskell。")])])]),s._v(" "),n("h2",{attrs:{id:"快速排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[s._v("#")]),s._v(" 快速排序")]),s._v(" "),n("h3",{attrs:{id:"分而治之-divide-and-conquer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分而治之-divide-and-conquer"}},[s._v("#")]),s._v(" 分而治之（divide and conquer）")]),s._v(" "),n("p",[s._v("Q:如果有一小快土地，需要均匀的分成方块，且分出来的方块要尽可能的大，应该怎么分？\n"),n("img",{attrs:{src:a(411),alt:""}})]),s._v(" "),n("p",[s._v("A: D&C策略\n(1) 找出基线条件，这种条件必须尽可能简单。\n(2) 不断将问题分解（或者说缩小规模），直到符合基线条件。")]),s._v(" "),n("blockquote",[n("p",[s._v("适合于边角料的最大方块，也适用于整个地的最大方块。")])]),s._v(" "),n("h3",{attrs:{id:"快速排序的思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序的思想"}},[s._v("#")]),s._v(" 快速排序的思想")]),s._v(" "),n("ul",[n("li",[s._v("对于排序来说，空数组或者已经排好序的数组是最简单的，不需要排序。")]),s._v(" "),n("li",[s._v("因此基线条件是数组为空或只包含一个元素")]),s._v(" "),n("li",[s._v("实际是二分查找的逆向操作,也是一种D&C思想的体现\n"),n("img",{attrs:{src:a(412),alt:""}})])]),s._v(" "),n("p",[n("strong",[s._v("代码实现")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("quicksort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        privot "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 小于等于基准值组成的子数组")]),s._v("\n        less "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("privot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 大于基准值组成的子数组")]),s._v("\n        greater "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("privot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" quckSort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("less"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("privot"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("qucksort"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("greater"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("大O表示法")]),s._v(" "),n("ol",[n("li",[s._v("每层操作N个元素，因此每次O(n)")]),s._v(" "),n("li",[s._v("层高为log(n)")]),s._v(" "),n("li",[s._v("快速排序的时间复杂度为O(n*log(n))\n"),n("img",{attrs:{src:a(413),alt:""}})]),s._v(" "),n("li",[s._v("最糟糕情况下每次作为基准值的元素都是最边缘，因此操作层高为N，所以复杂度为O(n*n)")])]),s._v(" "),n("h2",{attrs:{id:"散列函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#散列函数"}},[s._v("#")]),s._v(" 散列函数")]),s._v(" "),n("p",[s._v("散列函数：输入是一串信息（字符串），输出是一个数字\n❑ 散列函数很重要。前面的散列函数将所有的键都映射到一个位置，而最理想的情况是，散列函数将键均匀地映射到散列表的不同位置。\n❑ 如果散列表存储的链表很长，散列表的速度将急剧下降。然而，如果使用的散列函数很好，这些链表就不会很长！")]),s._v(" "),n("h2",{attrs:{id:"广度优先搜索-无向图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索-无向图"}},[s._v("#")]),s._v(" 广度优先搜索（无向图）")]),s._v(" "),n("blockquote",[n("p",[s._v("是一种图算法，解决最短路径问题的算法被称为广度优先搜索，帮助回答两种问题\n❑ 第一类问题：从节点A出发，有前往节点B的路径吗？\n❑ 第二类问题：从节点A出发，前往节点B的哪条路径最短？")])]),s._v(" "),n("h4",{attrs:{id:"工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),n("p",[n("em",[s._v("假设是要从人际关系网中查找芒果供应商")])]),s._v(" "),n("ol",[n("li",[s._v("创建一个队列，储存要检查的人（直接关系）")]),s._v(" "),n("li",[s._v("依次从队列中弹出一个人，查看是否是芒果供应商\n"),n("ul",[n("li",[s._v("如果是则完成")]),s._v(" "),n("li",[s._v("如果否则将这个人的所有邻居加入到队列中，返回第二步")]),s._v(" "),n("li",[s._v("如果队列为空，说明不存在")])])])]),s._v(" "),n("p",[n("strong",[s._v("代码实现")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" collections "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" deque "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个双端队列")]),s._v("\nsearch_queue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" deque\nsearch_queue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"you"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# graph["you"]是一个数组，其中包含你的所有邻居')]),s._v("\nsearched "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用于存放已经检查过的人，否则可能会造成死循环")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" search_queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 主要队列不为空")]),s._v("\n    person "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" search_queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("popleft"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从左边开始弹出第一个人")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" person "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" searched"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" person_is_seller"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断是否芒果供应商")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" persion "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('" is a mango seller!"')]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            search_queue "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n            searched"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 说明没有人是芒果供应商")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[n("em",[s._v("面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来解决问题。")])]),s._v(" "),n("h2",{attrs:{id:"狄克斯特拉算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#狄克斯特拉算法"}},[s._v("#")]),s._v(" 狄克斯特拉算法")]),s._v(" "),n("ul",[n("li",[s._v("处理加权图，即对于需要带权重的最短路线问题,只适用于有向无环图（directed acyclic graph, DAG）。")]),s._v(" "),n("li",[s._v("如果有负权边，就不能使用狄克斯特拉算法。因为负权边会导致这种算法不管用，这是因为狄克斯特拉算法这样假设：对于处理过的海报节点，没有前往该节点的更短路径。这种假设仅在没有负权边时才成立")])]),s._v(" "),n("h4",{attrs:{id:"工作原理-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作原理-2"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),n("p",[n("em",[s._v("对于起点到终点的路线问题")]),s._v(" "),n("img",{attrs:{src:a(414),alt:""}}),s._v("\n(1) 找出“最便宜”的节点，即可在最短时间内到达的节点。\n(2) 更新该节点的邻居的开销，其含义将稍后介绍。\n(3) 重复这个过程，直到对图中的每个节点都这样做了。\n(4) 计算最终路径。")]),s._v(" "),n("p",[n("strong",[s._v("代码实现")])]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 存储节点的邻居")]),s._v("\ngraph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"you"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"alice"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bob"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"claire"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 存储节点开销的散列表")]),s._v("\ninfinity"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"inf"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ncosts"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ncosts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\ncosts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\ncosts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("infinity\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 存储权重的散列表")]),s._v("\ngraph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ngraph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\ngraph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ngraph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\ngraph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 存储父节点的散列表")]),s._v("\nparents"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nparents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v("\nparents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),s._v("\nparents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fin"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n\nnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" find_lowest_cost_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在未处理节点中找出开销最小的节点")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#所有节点都被处理过即结束")]),s._v("\n    cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    neighbors "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" neighbors"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        new_cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" neighbors"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" new_cost"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果当前节点前往该邻居更近，更新开销")]),s._v("\n            costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new_cost\n            parents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同时该另据父节点设置为当前节点")]),s._v("\n    processed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标记为已处理过")]),s._v("\n    node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" find_lowest_cost_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新接下来需要处理的节点")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("find_lowest_cost_node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    lowest_cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"inf"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    lowest_cost_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 遍历所有节点")]),s._v("\n        cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" costs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" lowest_cost "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" node "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" processed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果当前节点没有处理过且开销更低")]),s._v("\n            lowest_cost "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" cost "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将其视为开销最低的节点")]),s._v("\n            lowest_cost_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" node\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" lowest_cost_node\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("h2",{attrs:{id:"贪婪算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪婪算法"}},[s._v("#")]),s._v(" 贪婪算法")]),s._v(" "),n("p",[s._v("通过每一步获取最优解，来达到总体最优解。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("广播台数量")]),s._v(" "),n("th",[s._v("精确算法")]),s._v(" "),n("th",[s._v("贪婪算法")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("时间复杂度")]),s._v(" "),n("td",[s._v("O(2^n)")]),s._v(" "),n("td",[s._v("O(n^n)")])]),s._v(" "),n("tr",[n("td",[s._v("10")]),s._v(" "),n("td",[s._v("102.4s")]),s._v(" "),n("td",[s._v("10s")])])])]),s._v(" "),n("h3",{attrs:{id:"近似算法-approximation-algorithm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#近似算法-approximation-algorithm"}},[s._v("#")]),s._v(" 近似算法（approximation algorithm）")]),s._v(" "),n("p",[n("img",{attrs:{src:a(415),alt:""}}),s._v(" "),n("em",[s._v("需要找出前往这5个城市的最优秀解，因此，需要计算媒体可能的路径")])]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("旅行商问题和集合覆盖问题有一些共同之处：你需要计算所有的解，并从中选出最小/最短的那个。这两个问题都属于NP完全问题(即多项式复杂程度的非确定性问题)。")]),s._v(" "),n("li",[s._v("如果能识别出问题属于NP问题，那么不用去寻找完美方案，而是使用近似算法即可。")])])]),s._v(" "),n("p",[n("strong",[s._v("示例")]),s._v(" "),n("em",[s._v("问题：假设你办了个广播节目，要让全美50个州的听众都收听得到，每个电台会覆盖多个州，存在有部分重叠，如何选择最小广播集合")]),s._v("\n(1) 选出这样一个广播台，即它覆盖了最多的未覆盖州。即便这个广播台覆盖了一些已覆盖的州，也没有关系。\n(2) 重复第一步，直到覆盖了所有的州。")]),s._v(" "),n("h2",{attrs:{id:"动态规划"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[s._v("#")]),s._v(" 动态规划")]),s._v(" "),n("h3",{attrs:{id:"背景问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景问题"}},[s._v("#")]),s._v(" 背景问题")]),s._v(" "),n("p",[s._v("对于背包问题，背包可承重固定，有不同商品，商品重量价格各不同，选最佳组合。在不考虑条件限制情况下，一共会有2^n种组合，这样的话时间复杂度为O(2^n)")]),s._v(" "),n("h3",{attrs:{id:"工作原理-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作原理-3"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),n("p",[s._v("D&C的思想，算出"),n("strong",[s._v("最小不可分")]),s._v("情况下的最佳解，在前者基础上算出更广阔情况下的最优解。即解决大问题时，对于分解后剩下的小问题，采用小问题的最优解来解决。")]),s._v(" "),n("p",[n("strong",[s._v("对于背包问题")]),s._v(" "),n("img",{attrs:{src:a(416),alt:""}})]),s._v(" "),n("blockquote",[n("p",[s._v("动态规划无法处理背包问题只偷商品一部分的情况，贪婪算法可以，优先拿价值高，然后次之。")])]),s._v(" "),n("ul",[n("li",[s._v("动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题。但仅当每个子问题都是"),n("strong",[s._v("离散")]),s._v("的，即不依赖于其他子问题时，动态规划才管用。这意味着使用动态规划算法解决不了去巴黎玩的问题。")]),s._v(" "),n("li",[s._v("每种动态规划解决方案都涉及网格。")]),s._v(" "),n("li",[s._v("单元格中的值通常就是你要优化的值。在前面的背包问题中，单元格的值为商品的价值")]),s._v(" "),n("li",[s._v("每个单元格都是一个子问题，因此你应考虑如何将问题分成子问题，这有助于你找出网格的坐标轴")])]),s._v(" "),n("h3",{attrs:{id:"最长公共子串-与-最长公共子序列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长公共子串-与-最长公共子序列"}},[s._v("#")]),s._v(" 最长公共子串 与 最长公共子序列")]),s._v(" "),n("p",[s._v("单词相似性识别问题")]),s._v(" "),n("h4",{attrs:{id:"最长公共子串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长公共子串"}},[s._v("#")]),s._v(" 最长公共子串")]),s._v(" "),n("p",[n("img",{attrs:{src:a(417),alt:""}})]),s._v(" "),n("h4",{attrs:{id:"最长公共子序列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最长公共子序列"}},[s._v("#")]),s._v(" 最长公共子序列")]),s._v(" "),n("p",[n("img",{attrs:{src:a(418),alt:""}})]),s._v(" "),n("h4",{attrs:{id:"实际应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实际应用"}},[s._v("#")]),s._v(" 实际应用")]),s._v(" "),n("p",[s._v("❑ 生物学家根据最长公共序列来确定DNA链的相似性，进而判断两种动物或疾病有多相似。\n❑ 你使用过诸如git diff等命令吗？它们指出两个文件的差异，也是使用动态规划实现的。\n❑ 盗版检查。")]),s._v(" "),n("h2",{attrs:{id:"k最近邻算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#k最近邻算法"}},[s._v("#")]),s._v(" K最近邻算法")]),s._v(" "),n("p",[s._v("K最近邻（k-nearest neighbours, KNN，通过特征抽取，比对K个特征相似度，来归类（或描述相似程度）。")]),s._v(" "),n("p",[s._v("主要涉及以下两项工作\n❑ 分类就是编组；\n❑ 回归就是预测结果（如一个数字）。")]),s._v(" "),n("blockquote",[n("p",[s._v("计算两位用户的距离时，使用的都是距离公式。还有更合适的公式吗？\n在实际工作中，经常使用余弦相似度（cosine similarity）,余弦相似度不计算两个矢量的距离，而比较它们的角度。但如果你要使用KNN，就一定要研究研究它！")])]),s._v(" "),n("h4",{attrs:{id:"实际应用-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实际应用-2"}},[s._v("#")]),s._v(" 实际应用")]),s._v(" "),n("ol",[n("li",[s._v("机器学习")]),s._v(" "),n("li",[s._v("股票预测")]),s._v(" "),n("li",[s._v("邮件过滤器")]),s._v(" "),n("li",[s._v("OCR")])]),s._v(" "),n("h2",{attrs:{id:"常见算法及复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见算法及复杂度"}},[s._v("#")]),s._v(" 常见算法及复杂度")]),s._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://www.runoob.com/w3cnote/ten-sorting-algorithm.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("1.0 十大经典排序算法 | 菜鸟教程 (runoob.com)"),n("OutboundLink")],1)])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("算法")]),s._v(" "),n("th",[s._v("冒泡排序")]),s._v(" "),n("th",[s._v("选择排序")]),s._v(" "),n("th",[s._v("插入排序")]),s._v(" "),n("th",[s._v("希尔排序")]),s._v(" "),n("th",[s._v("快速排序")]),s._v(" "),n("th"),s._v(" "),n("th"),s._v(" "),n("th"),s._v(" "),n("th"),s._v(" "),n("th")])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("common")]),s._v(" "),n("td",[s._v("O(n²)")]),s._v(" "),n("td",[s._v("O(n²)")]),s._v(" "),n("td",[s._v("O(n²)")]),s._v(" "),n("td",[s._v("根據步長序列的不同而不同，突破O(n²)")]),s._v(" "),n("td",[s._v("Ο(nlogn)")]),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td")]),s._v(" "),n("tr",[n("td",[s._v("best")]),s._v(" "),n("td",[s._v("O(n)")]),s._v(" "),n("td",[s._v("O(n²)")]),s._v(" "),n("td",[s._v("O(n)，每次只需考察前一个元素")]),s._v(" "),n("td",[s._v("O(n)")]),s._v(" "),n("td",[s._v("Ο(nlogn)")]),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td")]),s._v(" "),n("tr",[n("td",[s._v("remark")]),s._v(" "),n("td",[s._v("改良后的冒泡（两两比较交换），"),n("br"),s._v("只需n-1次")]),s._v(" "),n("td",[s._v("每次抽出目标元素放在新序列")]),s._v(" "),n("td",[s._v("通过构建有序序列，对于未排序数据，"),n("br"),s._v("在已排序序列中从后向前扫描，找到相应位置并插入。")]),s._v(" "),n("td",[s._v("插入排序的进阶版，对一定间距的元素进行比较排序，"),n("br"),s._v("缩小间距至1，达到全局有序")]),s._v(" "),n("td",[s._v("二分查找逆向")]),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td"),s._v(" "),n("td")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);