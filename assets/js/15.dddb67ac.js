(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{441:function(t,e,a){t.exports=a.p+"assets/img/0.2a27ed3a.png"},442:function(t,e,a){t.exports=a.p+"assets/img/1.281c2654.png"},491:function(t,e,a){"use strict";a.r(e);var v=a(33),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"raft"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#raft"}},[t._v("#")]),t._v(" RAFT")]),t._v(" "),v("p",[t._v("Raft是一种共识算法（consensus algorithm），也是实现分布式一致性的协议。")]),t._v(" "),v("blockquote",[v("p",[t._v("在分布式容错系统中,不同服务器就取值问题达成一致是一个根本的问题。")])]),t._v(" "),v("div",[t._v("F：followers 跟随者 (只读服务器节点)")]),t._v(" "),v("div",[t._v("C：candidate 候选人 (只读服务器节点,可竞选为领导者)")]),t._v(" "),v("div",[t._v("L：leader 领导者 (读写服务器节点)")]),t._v(" "),v("h2",{attrs:{id:"大致流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大致流程"}},[t._v("#")]),t._v(" 大致流程")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("C发起(拉票)请求给其他节点F")])]),t._v(" "),v("li",[v("p",[t._v("其他节点F响应(投票)")])]),t._v(" "),v("li",[v("p",[t._v("如果某个C节点拿到大部分的票,升级为领导者L")])]),t._v(" "),v("li",[v("p",[t._v("所有的值变更都需要经过领导者(可写)")])]),t._v(" "),v("li",[v("p",[t._v("领导者传递变更给其他节点F同步，直到大部分节点响应成功，才提交值变更")])]),t._v(" "),v("li",[v("p",[t._v("值变更提交后,L通知给其他节点F\n"),v("img",{attrs:{src:a(441),alt:""}})]),t._v(" "),v("p",[v("em",[t._v("C节点成为候选人（投票给自己），接单AB收到C的拉票并响应给C")])])])]),t._v(" "),v("h2",{attrs:{id:"leader-electiton"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#leader-electiton"}},[t._v("#")]),t._v(" Leader Electiton")]),t._v(" "),v("ul",[v("li",[t._v("与选举相关的超时设置有两个\n"),v("ul",[v("li",[t._v("竞选时长(election timeout)")]),t._v(" "),v("li",[t._v("心跳时长(heartbreak timeout)")])])])]),t._v(" "),v("ol",[v("li",[t._v("跟随者F升级为候选人所需等待的时间为竞选时长，随机150ms-300ms")]),t._v(" "),v("li",[t._v("F升级为候选人C后，开启竞选期,发起(拉票)请求给其他节点F，如果收到请求的节点在竞选期内并没有给别的候选人投票（响应）则会响应给当前拉票人，并且重置F自己的竞选期，")]),t._v(" "),v("li",[t._v("一旦某个候选人C拿到大多数票，就会在心跳期间(heartbreak timeout)发送追加条目信息(Append Entries Messages)给追随者F，追随者接收后会重置自己的竞选期")]),t._v(" "),v("li",[t._v("因此如果一直没有收到心跳，超过追随者的竞选期(主要收到就会重置竞选期)，追随者会成为候选人Candidate")])]),t._v(" "),v("h2",{attrs:{id:"split-vote"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#split-vote"}},[t._v("#")]),t._v(" Split vote")]),t._v(" "),v("ol",[v("li",[t._v("当超过一个候选人同时具有成为领导者资格，就会出现分票的情况")]),t._v(" "),v("li",[t._v("这两个候选人就会同时重新进入下一个选举期，由于election timeout是随机的，因此必然会有先后关系，从而只会有一个成为领导者")])]),t._v(" "),v("h2",{attrs:{id:"log-replication-日志拷贝-保持一致"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#log-replication-日志拷贝-保持一致"}},[t._v("#")]),t._v(" Log Replication(日志拷贝，保持一致)")]),t._v(" "),v("ol",[v("li",[t._v("一旦选出一个领导者，需要拷贝同步日志给其他跟随者，这一过程通过用于传递心跳的追加条目信息实现")]),t._v(" "),v("li",[t._v("客户端发送信息(譬如赋值)给服务器，会追加到日志里，会在下一次心跳触发时发给追随者")]),t._v(" "),v("li",[t._v("一旦得到大多数追随者响应确认，就会提交该操作，返回响应给客户端，且通知F")]),t._v(" "),v("li",[t._v("如果进行了分区，互不同，则会出现多个领导者（不同election term的，参照Split vote不可能在同一term）")]),t._v(" "),v("li",[t._v("此时如果客户端对两个领导者分别发送信息，那么非最新的term将不能得到大多数追随者的响应确认，因此会保持未提交状态；相反最新term的领导者能成功提交信息")]),t._v(" "),v("li",[t._v("修复分区后，非最新term的领导者将会发现存在最新领导者，因而会暂停，此时其以及其追随者都会回滚未提交信息，重新匹配最新领导者的日志")]),t._v(" "),v("li",[t._v("这样日志就能在分区中保持一致性。\n"),v("img",{attrs:{src:a(442),alt:""}}),t._v(" "),v("em",[t._v("AB节点在一个分区分区，任期为1落后于BCD所在的分区，领导者B接单拿不到大多数响应，因此无法提交log，而C则可以")])])]),t._v(" "),v("h2",{attrs:{id:"raft演示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#raft演示"}},[t._v("#")]),t._v(" "),v("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raft演示"),v("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);